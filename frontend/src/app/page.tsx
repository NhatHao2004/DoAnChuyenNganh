'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';

// Custom hook for scroll animation
function useScrollAnimation() {
  const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setVisibleSections((prev) => new Set(prev).add(entry.target.id));
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px',
      }
    );

    // Observe all sections
    const sections = document.querySelectorAll('[data-scroll-animation]');
    sections.forEach((section) => observer.observe(section));

    return () => {
      sections.forEach((section) => observer.unobserve(section));
    };
  }, []);

  return visibleSections;
}

export default function Home() {
  const [isLoaded, setIsLoaded] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const visibleSections = useScrollAnimation();

  useEffect(() => {
    setIsLoaded(true);

    // Show/hide scroll to top button
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 500);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const isSectionVisible = (id: string) => visibleSections.has(id);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-red-50">
      {/* Header Navigation */}
      <header className="fixed top-0 w-full z-50 bg-white/90 backdrop-blur-md shadow-md">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center">
                <span className="text-2xl">üèõÔ∏è</span>
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-800">VƒÉn H√≥a Khmer</h1>
                <p className="text-xs text-gray-600 font-[var(--font-khmer)]">·ûú·ûî·üí·ûî·ûí·ûò·üå·ûÅ·üí·ûò·üÇ·ûö</p>
              </div>
            </div>
            
            <nav className="hidden md:flex items-center space-x-6">
              <Link href="#" className="text-gray-700 hover:text-orange-600 transition">Trang Ch·ªß</Link>
              <Link href="#features" className="text-gray-700 hover:text-orange-600 transition">T√≠nh NƒÉng</Link>
              <Link href="#culture" className="text-gray-700 hover:text-orange-600 transition">VƒÉn H√≥a</Link>
              <Link href="#about" className="text-gray-700 hover:text-orange-600 transition">Gi·ªõi Thi·ªáu</Link>
              <button className="px-6 py-2 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-full hover:shadow-lg transition">
                ƒêƒÉng Nh·∫≠p
              </button>
            </nav>

            <button className="md:hidden text-gray-700">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section 
        id="hero" 
        data-scroll-animation
        className="pt-32 pb-20 px-4"
      >
        <div className="container mx-auto">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            {/* Left Content */}
            <div className={`space-y-6 transition-all duration-1000 ${isLoaded ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-10'}`}>
              <div className="inline-block px-4 py-2 bg-orange-100 rounded-full text-orange-600 text-sm font-semibold mb-4">
                üåü Kh√°m Ph√° VƒÉn H√≥a Khmer
              </div>
              
              <h1 className="text-5xl md:text-6xl font-bold text-gray-900 leading-tight">
                H·ªçc VƒÉn H√≥a
                <span className="block bg-gradient-to-r from-amber-500 via-orange-600 to-red-600 bg-clip-text text-transparent">
                  Khmer Nam B·ªô
                </span>
              </h1>

              <p className="text-xl text-gray-600 leading-relaxed font-[var(--font-khmer)]">
                ·ûö·üÄ·ûì·ûú·ûî·üí·ûî·ûí·ûò·üå ·ûî·üí·ûö·ûñ·üÉ·ûé·û∏ ·ûì·û∑·ûÑ·ûü·û∂·ûü·ûì·û∂·ûÅ·üí·ûò·üÇ·ûö·ûÄ·ûò·üí·ûñ·ûª·ûá·û∂·ûÄ·üí·ûö·üÑ·ûò
              </p>

              <p className="text-lg text-gray-600 leading-relaxed">
                B·∫£o t·ªìn, lan t·ªèa v√† gi√°o d·ª•c c√°c gi√° tr·ªã vƒÉn h√≥a ƒë·∫∑c tr∆∞ng c·ªßa c·ªông ƒë·ªìng ng∆∞·ªùi Khmer 
                sinh s·ªëng t·∫°i Nam B·ªô Vi·ªát Nam th√¥ng qua n·ªÅn t·∫£ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i.
              </p>

              <div className="flex flex-wrap gap-4 pt-4">
                <button className="px-8 py-4 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-full font-semibold hover:shadow-xl hover:scale-105 transition-all duration-300 flex items-center space-x-2">
                  <span>B·∫Øt ƒê·∫ßu H·ªçc</span>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                  </svg>
                </button>
                
                <button className="px-8 py-4 bg-white border-2 border-orange-500 text-orange-600 rounded-full font-semibold hover:bg-orange-50 transition-all duration-300 flex items-center space-x-2">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" />
                  </svg>
                  <span>Xem Demo</span>
                </button>
              </div>

              {/* Stats */}
              <div className="flex gap-8 pt-8">
                <div>
                  <div className="text-3xl font-bold text-orange-600">100+</div>
                  <div className="text-sm text-gray-600">B√†i H·ªçc</div>
                </div>
                <div>
                  <div className="text-3xl font-bold text-orange-600">50+</div>
                  <div className="text-sm text-gray-600">Di S·∫£n</div>
                </div>
                <div>
                  <div className="text-3xl font-bold text-orange-600">1000+</div>
                  <div className="text-sm text-gray-600">Ng∆∞·ªùi H·ªçc</div>
                </div>
              </div>
            </div>

            {/* Right Image/Animation */}
            <div className={`relative transition-all duration-1000 delay-300 ${isLoaded ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-10'}`}>
              <div className="relative">
                {/* Decorative circles */}
                <div className="absolute -top-4 -right-4 w-72 h-72 bg-gradient-to-br from-amber-300 to-orange-400 rounded-full opacity-20 animate-pulse"></div>
                <div className="absolute -bottom-4 -left-4 w-64 h-64 bg-gradient-to-br from-red-300 to-orange-400 rounded-full opacity-20 animate-pulse delay-75"></div>
                
                {/* Main image placeholder */}
                <div className="relative bg-white rounded-3xl shadow-2xl p-8 backdrop-blur-sm">
                  <div className="aspect-square bg-gradient-to-br from-amber-100 via-orange-100 to-red-100 rounded-2xl flex items-center justify-center overflow-hidden">
                    {/* Temple Icon */}
                    <div className="text-9xl animate-float">üèõÔ∏è</div>
                  </div>
                  
                  {/* Floating cards */}
                  <div className="absolute -top-6 -left-6 bg-white rounded-2xl shadow-lg p-4 animate-float">
                    <div className="flex items-center space-x-2">
                      <span className="text-2xl">üìö</span>
                      <div>
                        <div className="text-xs text-gray-500">B√†i H·ªçc</div>
                        <div className="font-bold text-orange-600">Ph·∫≠t Gi√°o</div>
                      </div>
                    </div>
                  </div>

                  <div className="absolute -bottom-6 -right-6 bg-white rounded-2xl shadow-lg p-4 animate-float delay-100" style={{animationDelay: '0.5s'}}>
                    <div className="flex items-center space-x-2">
                      <span className="text-2xl">üé≠</span>
                      <div>
                        <div className="text-xs text-gray-500">L·ªÖ H·ªôi</div>
                        <div className="font-bold text-orange-600">Chol Chnam</div>
                      </div>
                    </div>
                  </div>

                  <div className="absolute top-1/2 -left-8 bg-white rounded-2xl shadow-lg p-4 animate-float" style={{animationDelay: '1s'}}>
                    <div className="flex items-center space-x-2">
                      <span className="text-2xl">üó£Ô∏è</span>
                      <div>
                        <div className="text-xs text-gray-500">Ng√¥n Ng·ªØ</div>
                        <div className="font-bold text-orange-600">Ti·∫øng Khmer</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section 
        id="features" 
        data-scroll-animation
        className="py-20 px-4 bg-white"
      >
        <div className="container mx-auto">
          <div className={`text-center mb-16 transition-all duration-1000 ${
            isSectionVisible('features') ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
          }`}>
            <h2 className="text-4xl font-bold text-gray-900 mb-4">T√≠nh NƒÉng N·ªïi B·∫≠t</h2>
            <p className="text-gray-600 text-lg">Kh√°m ph√° c√°c ch·ª©c nƒÉng h·ªçc t·∫≠p ƒëa d·∫°ng</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <div
                key={index}
                className={`group bg-gradient-to-br from-white to-orange-50 rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-700 hover:-translate-y-2 border border-orange-100 ${
                  isSectionVisible('features') ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
                }`}
                style={{ transitionDelay: `${index * 150}ms` }}
              >
                <div className="text-5xl mb-4 group-hover:scale-110 transition-transform duration-300">
                  {feature.icon}
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">{feature.title}</h3>
                <p className="text-sm text-gray-500 mb-3 font-[var(--font-khmer)]">{feature.titleKhmer}</p>
                <p className="text-gray-600 leading-relaxed">{feature.description}</p>
                
                <button className="mt-6 text-orange-600 font-semibold flex items-center space-x-2 group-hover:space-x-3 transition-all">
                  <span>T√¨m hi·ªÉu th√™m</span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Culture Highlights Section */}
      <section 
        id="culture" 
        data-scroll-animation
        className="py-20 px-4 bg-gradient-to-br from-orange-50 to-amber-50"
      >
        <div className="container mx-auto">
          <div className={`text-center mb-16 transition-all duration-1000 ${
            isSectionVisible('culture') ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
          }`}>
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Kh√°m Ph√° VƒÉn H√≥a</h2>
            <p className="text-gray-600 text-lg">Tr·∫£i nghi·ªám nh·ªØng gi√° tr·ªã vƒÉn h√≥a ƒë·ªôc ƒë√°o</p>
          </div>

          <div className="grid md:grid-cols-4 gap-6">
            {cultureCategories.map((category, index) => (
              <div
                key={index}
                className={`group relative bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-700 cursor-pointer ${
                  isSectionVisible('culture') ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
                }`}
                style={{ transitionDelay: `${index * 100}ms` }}
              >
                <div className="aspect-square bg-gradient-to-br from-amber-200 to-orange-300 flex items-center justify-center text-6xl group-hover:scale-110 transition-transform duration-300">
                  {category.icon}
                </div>
                <div className="p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-2">{category.title}</h3>
                  <p className="text-sm text-gray-500 font-[var(--font-khmer)] mb-2">{category.titleKhmer}</p>
                  <p className="text-sm text-gray-600">{category.count} n·ªôi dung</p>
                </div>
                
                <div className="absolute inset-0 bg-gradient-to-t from-orange-600 to-transparent opacity-0 group-hover:opacity-90 transition-opacity duration-300 flex items-end">
                  <div className="p-6 text-white w-full">
                    <p className="text-sm mb-2">{category.description}</p>
                    <button className="text-white font-semibold flex items-center space-x-2">
                      <span>Kh√°m ph√°</span>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section 
        id="cta" 
        data-scroll-animation
        className="py-20 px-4 bg-gradient-to-r from-amber-500 via-orange-600 to-red-600"
      >
        <div className={`container mx-auto text-center transition-all duration-1000 ${
          isSectionVisible('cta') ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
        }`}>
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            B·∫Øt ƒê·∫ßu H√†nh Tr√¨nh Kh√°m Ph√°
          </h2>
          <p className="text-xl text-white/90 mb-8 font-[var(--font-khmer)]">
            ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûí·üí·ûú·ûæ·ûä·üÜ·ûé·ûæ·ûö·ûü·üí·ûú·üÇ·ûÑ·ûô·ûõ·üã·ûñ·û∏·ûú·ûî·üí·ûî·ûí·ûò·üå·ûÅ·üí·ûò·üÇ·ûö
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <button className="px-8 py-4 bg-white text-orange-600 rounded-full font-semibold hover:bg-gray-100 transition-all duration-300 hover:scale-105 shadow-xl">
              ƒêƒÉng K√Ω Mi·ªÖn Ph√≠
            </button>
            <button className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-full font-semibold hover:bg-white/10 transition-all duration-300">
              Xem H∆∞·ªõng D·∫´n
            </button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 px-4">
        <div className="container mx-auto">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center">
                  <span className="text-xl">üèõÔ∏è</span>
                </div>
                <span className="font-bold text-lg">VƒÉn H√≥a Khmer</span>
              </div>
              <p className="text-gray-400 text-sm">
                B·∫£o t·ªìn v√† lan t·ªèa gi√° tr·ªã vƒÉn h√≥a Khmer Nam B·ªô
              </p>
            </div>

            <div>
              <h4 className="font-bold mb-4">Ch·ª©c NƒÉng</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li><a href="#" className="hover:text-orange-500">B√†i H·ªçc</a></li>
                <li><a href="#" className="hover:text-orange-500">L·ªÖ H·ªôi</a></li>
                <li><a href="#" className="hover:text-orange-500">Di S·∫£n</a></li>
                <li><a href="#" className="hover:text-orange-500">B·∫£n ƒê·ªì</a></li>
              </ul>
            </div>

            <div>
              <h4 className="font-bold mb-4">H·ªó Tr·ª£</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li><a href="#" className="hover:text-orange-500">H∆∞·ªõng D·∫´n</a></li>
                <li><a href="#" className="hover:text-orange-500">Li√™n H·ªá</a></li>
                <li><a href="#" className="hover:text-orange-500">FAQ</a></li>
                <li><a href="#" className="hover:text-orange-500">Ch√≠nh S√°ch</a></li>
              </ul>
            </div>

            <div>
              <h4 className="font-bold mb-4">Theo D√µi</h4>
              <div className="flex space-x-4">
                <a href="#" className="w-10 h-10 bg-orange-600 rounded-full flex items-center justify-center hover:bg-orange-700 transition">
                  <span>üìò</span>
                </a>
                <a href="#" className="w-10 h-10 bg-orange-600 rounded-full flex items-center justify-center hover:bg-orange-700 transition">
                  <span>üì∑</span>
                </a>
                <a href="#" className="w-10 h-10 bg-orange-600 rounded-full flex items-center justify-center hover:bg-orange-700 transition">
                  <span>üé•</span>
                </a>
              </div>
            </div>
          </div>

          <div className="border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400">
            <p>¬© 2025 Website VƒÉn H√≥a Khmer Nam B·ªô - L√¢m Nh·∫≠t H√†o (110122071)</p>
            <p className="mt-2">GVHD: Th·∫°ch Kong Saoane</p>
          </div>
        </div>
      </footer>

      {/* Scroll to Top Button */}
      <button
        onClick={scrollToTop}
        className={`fixed bottom-8 right-8 w-12 h-12 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center z-50 hover:scale-110 ${
          showScrollTop ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10 pointer-events-none'
        }`}
        aria-label="Scroll to top"
      >
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
        </svg>
      </button>
    </div>
  );
}

const features = [
  {
    icon: 'üìö',
    title: 'B√†i H·ªçc ƒêa D·∫°ng',
    titleKhmer: '·ûò·üÅ·ûö·üÄ·ûì·ûÖ·ûò·üí·ûö·ûª·üá',
    description: 'H·ªçc v·ªÅ Ph·∫≠t gi√°o Nam t√¥ng, ti·∫øng Khmer, vƒÉn h√≥a truy·ªÅn th·ªëng qua video, h√¨nh ·∫£nh v√† b√†i t·∫≠p t∆∞∆°ng t√°c.',
  },
  {
    icon: 'üé≠',
    title: 'L·ªÖ H·ªôi Truy·ªÅn Th·ªëng',
    titleKhmer: '·ûñ·û∑·ûí·û∏·ûî·ûª·ûé·üí·ûô·ûî·üí·ûö·ûñ·üÉ·ûé·û∏',
    description: 'Kh√°m ph√° Chol Chnam Thmay, Ok Om Bok, Sen Dolta v·ªõi h√¨nh ·∫£nh, video v√† l·ªãch t·ªï ch·ª©c chi ti·∫øt.',
  },
  {
    icon: 'üó∫Ô∏è',
    title: 'B·∫£n ƒê·ªì Di S·∫£n',
    titleKhmer: '·ûï·üÇ·ûì·ûë·û∏·ûî·üÅ·ûè·û∑·ûÄ·ûó·ûé·üí·ûå',
    description: 'T√¨m ki·∫øm ch√πa, di t√≠ch, di s·∫£n vƒÉn h√≥a Khmer g·∫ßn b·∫°n v·ªõi c√¥ng ngh·ªá b·∫£n ƒë·ªì t∆∞∆°ng t√°c.',
  },
  {
    icon: 'üó£Ô∏è',
    title: 'H·ªçc Ti·∫øng Khmer',
    titleKhmer: '·ûö·üÄ·ûì·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö',
    description: 'H·ªçc t·ª´ v·ª±ng, ph√°t √¢m, ng·ªØ ph√°p ti·∫øng Khmer qua b√†i gi·∫£ng c√≥ √¢m thanh v√† b√†i t·∫≠p luy·ªán t·∫≠p.',
  },
  {
    icon: 'ü§ñ',
    title: 'AI Chatbot',
    titleKhmer: '·ûá·üÜ·ûì·ûΩ·ûô·ûÄ·û∂·ûö AI',
    description: 'Tr√≤ chuy·ªán v·ªõi tr·ª£ l√Ω ·∫£o th√¥ng minh ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ vƒÉn h√≥a, l·ªÖ h·ªôi, v√† ƒë·ªãa ƒëi·ªÉm vƒÉn h√≥a Khmer.',
  },
  {
    icon: 'üèÜ',
    title: 'Gamification',
    titleKhmer: '·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ',
    description: 'Nh·∫≠n ƒëi·ªÉm, huy hi·ªáu, tham gia b·∫£ng x·∫øp h·∫°ng khi ho√†n th√†nh b√†i h·ªçc v√† th·ª≠ th√°ch.',
  },
];

const cultureCategories = [
  {
    icon: 'üèõÔ∏è',
    title: 'Ch√πa Khmer',
    titleKhmer: '·ûú·ûè·üí·ûè·ûÅ·üí·ûò·üÇ·ûö',
    count: '50+',
    description: 'Kh√°m ph√° ki·∫øn tr√∫c ƒë·ªôc ƒë√°o c·ªßa c√°c ng√¥i ch√πa Khmer Nam B·ªô',
  },
  {
    icon: 'üìñ',
    title: 'Truy·ªán D√¢n Gian',
    titleKhmer: '·ûö·ûø·ûÑ·ûñ·üí·ûö·üÅ·ûÑ·ûî·üí·ûö·ûá·û∂·ûá·ûì',
    count: '30+',
    description: 'ƒê·ªçc v√† nghe nh·ªØng c√¢u chuy·ªán truy·ªÅn th·ªëng ƒë·∫ßy √Ω nghƒ©a',
  },
  {
    icon: 'üé®',
    title: 'Ngh·ªá Thu·∫≠t',
    titleKhmer: '·ûü·û∑·ûõ·üí·ûî·üà',
    count: '40+',
    description: 'T√¨m hi·ªÉu v·ªÅ ngh·ªá thu·∫≠t ƒëi√™u kh·∫Øc, v·∫Ω, m√∫a truy·ªÅn th·ªëng',
  },
  {
    icon: 'üç≤',
    title: '·∫®m Th·ª±c',
    titleKhmer: '·ûò·üí·û†·ûº·ûî·û¢·û∂·û†·û∂·ûö',
    count: '25+',
    description: 'Kh√°m ph√° h∆∞∆°ng v·ªã ƒë·ªôc ƒë√°o c·ªßa m√≥n ƒÉn Khmer',
  },
];
